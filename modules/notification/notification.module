<?php

/**
 * @file
 * APubSub Follow module file.
 *
 * User notifications will be fetched using a subscriber instance. Everything
 * will happen with this instance, and almost never using directly subscriptions
 * instead (except for some rare edge case needs).
 */

use MakinaCorpus\APubSub\CursorInterface;
use MakinaCorpus\APubSub\Error\SubscriptionDoesNotExistException;
use MakinaCorpus\APubSub\Field;
use MakinaCorpus\APubSub\Notification\NotificationService;

/**
 * Enable production mode variable name.
 */
const APB_VAR_ENABLE_PROD = 'apb.notification.silent';

/**
 * Enable production mode default value.
 */
const APB_DEF_ENABLE_PROD = true;

/**
 * Read all older messages when reading the list variable name.
 */
const APB_VAR_UNREAD_UNFOLD_ALL = 'apb_follow_unread_all_on_list';

/**
 * Read messages when unfolding the block variable name.
 */
const APB_VAR_UNREAD_UNFOLD = 'apb_follow_unread_on_click';

/**
 * Read messages when unfolding the block default value.
 */
const APB_DEF_UNREAD_UNFOLD = true;

/**
 * Store HTML inside messages variable name.
 */
const APB_VAR_ENABLE_FORMATTED_CONTENT = 'apb.notification.store_formatted';

/**
 * Store HTML inside messages default value.
 */
const APB_DEF_ENABLE_FORMATTED_CONTENT = false;

/**
 * Backend variable name.
 */
const APB_VAR_USER_PAGER_LIMIT = 'apb_follow_user_pager_limit';

/**
 * Backend default value.
 */
const APB_DEF_USER_PAGER_LIMIT = 20;

/**
 * User block limit variable name.
 */
const APB_VAR_USER_BLOCK_LIMIT = 'apb_follow_user_block_limit';

/**
 * User block limit default value.
 */
const APB_DEF_USER_BLOCK_LIMIT = 8;

/**
 * Enabled types variable name.
 */
const APB_VAR_ENABLED_TYPES = 'apb_follow_enabled_types';

/**
 * Enabled types default value.
 */
const APB_DEF_ENABLED_TYPES = null;

/**
 * Notification image style variable name.
 */
const APB_VAR_IMG_STYLE = 'apb_follow_image_style';

/**
 * Notification image style default value.
 */
const APB_DEF_IMG_STYLE = 'icon-64';

/**
 * User account subscription type.
 */
const ACCOUNT_SUB = 'u';

/**
 * Implements hook_permission().
 */
function notification_permission() {
  return [
    'follow other users' => [
      'title'       => t("Follow other users"),
      'description' => t("Allow the user to follow other users messages."),
    ],
    'see notifications of all users' => [
      'title'       => t("See notifications of all user profiles"),
      'description' => t("Users with this permission can manage other user's notifications, use this for moderation only."),
    ],
  ];
}

/**
 * Menu access callback.
 */
function notification_user_access($account = null) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  return $account->uid
          && (
           (user_access('see notifications of all users')
           || ($account->uid == $user->uid)
           || ($account->uid !== $user->uid && user_access('follow other users')))
          );
}

/**
 * Implements hook_menu().
 */
function notification_menu() {

  $items = [];

  // User preferences and pages.
  $items['user/%user/notifications'] = [
    'title'            => "Notifications",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => ['notification_page_user_list', 1],
    'access callback'  => 'notification_user_access',
    'access arguments' => [1],
    'type'             => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file'             => 'notification.pages.inc',
  ];
  $items['user/%user/notifications/all'] = [
    'title'            => "Notifications",
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 0,
  ];

  // Site wide administration pages.
  $items['admin/config/people/notification'] = [
    'title'             => "Notifications",
    'description'       => "Enable or disable notifications globally and configuration the notifications behavior.",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['\MakinaCorpus\Drupal\APubSub\Admin\FormatterListForm'],
    'access arguments'  => ['administer site configuration'],
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/config/people/notification/formatters'] = [
    'title'             => "Formatters",
    'type'              => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/config/people/notification/settings'] = [
    'title'             => "Global settings",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['\MakinaCorpus\Drupal\APubSub\Admin\NotificationConfigForm'],
    'access arguments'  => ['administer site configuration'],
    'weight'            => 100,
    'type'              => MENU_LOCAL_TASK,
  ];

  return $items;
}

/**
 * Get notification manager.
 *
 * @return \MakinaCorpus\APubSub\Notification\NotificationService
 */
function notification_service_get() {
  return \Drupal::service('apb.notification');
}

/**
 * Implements hook_theme().
 */
function notification_theme() {
  return [
    'notification_block' => [
      'render element' => 'data',
      'template'       => 'notification-block',
    ],
    'notification_page' => [
      'render element' => 'form',
      'template'       => 'notification-page',
      'file'           => 'notification.pages.inc'
    ],
  ];
}

/**
 * Implements hook_block_info().
 */
function notification_block_info() {
  return [
    'notification' => [
      'info'  => t("Current user notifications"),
      'cache' => DRUPAL_NO_CACHE,
    ],
  ];
}

/**
 * Implements hook_image_default_styles().
 *
 * Defines styles for notification images (being displayed at various places
 * of the site). For example, 32x32 variant will be displayed in current
 * notifications block list, while the 64x64 variant will mostly be used
 * in page listings.
 */
function notification_image_default_styles() {
  return array(
    'icon-32' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 32,
            'height' => 32,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
    'icon-48' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 48,
            'height' => 48,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
    'icon-64' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 64,
            'height' => 64,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function notification_block_view($delta = '') {

  global $user;

  // No notifications possible for anonymous user.
  if (!$user->uid) {
    return;
  }

  switch ($delta) {

    case 'notification':
      $block = array(
        'content' => array(
          // Stupid Drupal is stupid, and will move out your div over the
          // block if you don't wrap it inside.
          'inside' => array(
            '#prefix' => '<div id="notifications">',
            '#suffix' => '</div>',
          ),
        ),
      );

      $block['content']['inside'] += notification_block_render($user);

      return $block;
    }
}

/**
 * Render the follow form for the given account.
 */
function notification_follow_form(
  $form,
  &$form_state,
  $targetId,
  $targetType,
  $subscriberType = null,
  $followLabel    = null,
  $unfollowLabel  = null,
  $what           = null)
{
  global $user;

  $service    = notification_service_get();
  $chanId     = $service->getChanId($targetType, $targetId);
  $subscriber = $service->getSubscriberFor($subscriberType, $user->uid);

  $form['#what'] = null === $what ? t("this channel") : $what;

  $form['cid'] = array(
    '#type' => 'value',
    '#value' => $chanId,
  );
  $form['sid'] = array(
    '#type' => 'value',
    '#value' => $subscriber->getId(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
  );

  try {
    $subscriber->getSubscriptionFor($chanId);
    $form['submit']['#value'] = ($unfollowLabel ? $unfollowLabel : t("Unfollow"));
  } catch (SubscriptionDoesNotExistException $e) {
    $form['submit']['#value'] = ($followLabel ? $followLabel : t("Follow"));
  }

  if (!user_access('follow other users')) {
    // But leave it displayed to make him wanna do it!
    $form['submit']['#disabled'] = TRUE;
  }

  return $form;
}

/**
 * Follow form submit handler.
 */
function notification_follow_form_submit($form, &$form_state) {

  $chanId       = $form_state['values']['cid'];
  $subscriberId = $form_state['values']['sid'];
  $service      = notification_service_get();
  $subscriber   = $service->getSubscriber($subscriberId);

  // FIXME: This needs fixing
  //  * operation must be set in form, else submit may differ from button label
  //  * use the notification manager instead would be better

  try {
    // Throws an exception if the user is not following the channel.
    $subscriber->getSubscriptionFor($chanId);
    $service->unsubscribe($chanId, $subscriberId);
    drupal_set_message(t("You are no longer following !what", array('!what' => $form['#what'])));
  } catch (SubscriptionDoesNotExistException $e) {
    $service->subscribe($chanId, $subscriberId);
    drupal_set_message(t("You are now following !what", array('!what' => $form['#what'])));
  }
}

/**
 * Render a single image.
 *
 * @param string $uri
 * @param int $size
 *
 * @return string|array
 *   drupal_render() friendly structure.
 */
function notification_image_render($uri, $size = null) {

  $scheme = null;
  $path   = null;
  $size   = (int)$size;
  $build  = array();

  if (FALSE !== strpos($uri, '://')) {
    list($scheme, $path) = explode('://', $uri);
  }

  if (null === $scheme || 'icon' === $scheme) {
    if (!function_exists('stockicon_get')) {
      return;
    }
    if ($uri = stockicon_get()->renderIcon($path, $size . 'x' . $size)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  } else if ($style = variable_get(APB_VAR_IMG_STYLE, APB_DEF_IMG_STYLE)) {
    // Try with user driven configuration if possible.
    if ($uri = image_style_url($style, $uri)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  } else {
    // We support only a few styles for user images. Please use stock icon
    // whenever you can.
    switch ($size) {

      case 32:
      case 48:
      case 64:
        $style = 'icon-' . $size;
        break;

      default:
        return;
    }

    if ($uri = image_style_url($style, $uri)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  }

  return $build;
}

/**
 * Render the notifications for the given user account.
 *
 * @param object $account
 *   Subscriber account.
 */
function notification_block_render($account) {

  $build = array(
    '#theme' => 'notification_block',
    '#list'  => array(),
  );

  $service     = notification_service_get();
  $subscriber  = $service->getSubscriber($account->uid);
  $unreadCount = 0;
  $totalCount  = 0;
  $limit       = variable_get(APB_VAR_USER_BLOCK_LIMIT, APB_DEF_USER_BLOCK_LIMIT);
  $title       = null;

  $cursor = $subscriber
    ->fetch()
    ->addSort(Field::MSG_SENT, CursorInterface::SORT_DESC)
    ->addSort(Field::MSG_ID, CursorInterface::SORT_DESC)
    ->setRange($limit, 0)
  ;

  /* @var $cursor MakinaCorpus\APubSub\MessageInstanceInterface[] */
  foreach ($cursor as $message) {

    $notification = $service->getNotification($message);

    ++$totalCount;

    if ($message->isUnread()) {
      ++$unreadCount;
    }

    if ($uri = $notification->getImageUri()) {
      $image = notification_image_render($uri);
    } else {
      $image = '';
    }

    $build['#list'][$message->getId()] = array(
      'id'     => $message->getId(),
      'image'  => $image,
      'time'   => $message->getSendDate()->getTimestamp(),
      'text'   => $notification->format(),
      'unread' => $message->isUnread(),
      'type'   => $message->getType(),
    );
  }

  // Build header
  if ($unreadCount) {
    $title = format_plural(
      $unreadCount,
      "Displaying @count unread message out of @total",
      "Displaying @count unread messages out of @total",
      array(
        '@count' => $unreadCount,
        '@total' => $totalCount,
      ));
  } else {
    $title = format_plural(
      $totalCount,
      "Displaying @count message",
      "Displaying @count messages");
  }

  $build['#unread_count'] = $unreadCount;
  $build['#total_count']  = $totalCount;
  $build['#real_total']   = $cursor->getTotalCount();
  $build['#title']        = $title;

  return $build;
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_notification_block(&$variables) {

  global $user;

  $data = $variables['data'];

  $variables += array(
    'unread_count' => $data['#unread_count'],
    'total_count'  => $data['#total_count'],
    'real_total'   => $data['#real_total'],
    'title'        => $data['#title'],
    'list'         => $data['#list'],
    'all_link'     => l(t("See all"), 'user/' . $user->uid . '/notifications', array('attributes' => array('class' => array('all-link')))),
    'pref_link'    => l(t("Preferences"), 'user/' . $user->uid . '/notifications/settings', array('attributes' => array('class' => array('pref-link')))),
  );
}
